'''
http://www.johannes-bauer.com/compsci/ecc/

Generating a keypair
Generating a keypair for ECC is trivial. To get the private key, 
choose a random integer dA, so that 
0 < Da < n
Then getting the accompanying public key QA is equally trivial, 
you just have to use scalar point multiplication of the 
private key with the generator point G:
Q_A = d_A \* G
Note that the public and private key are not equally exchangeable 
(like in RSA, where both are integers): the private key dA is a 
integer, but the public key QA is a point on the curve.

Symetric key generation als on this site
assume that you receive a message, which is encrypted with a symmetric key. 
Together with that message you receive a value of R in plain text. 
How can you -- with the aid of your private key, of course -- 
recover the symmetric key? Well, that's also easy:
S = d_A* R
'''

p = 66613228468057067174020983032928881560472426669241405016005730824623794465869362057274827393285907012484680234697546329376016746378311582480286083234644290785511944291549271487726969925686678905879099

b = 45223864971118414349985382738003866428113942958131535509178125694703251747643413310403150844795331571656753771497817161757866690433361009231729672861987005702783704397577607186210054385366776790456581

c = 20153843419740896052710102383964754384483755985974515793721364759317519748676497303468952758401523530309451831374973915827761416257144949729503853811565651851898066618858860267882095184061048332064241

x = 30095052538385415653203830129152503785615605447308012484750387601278810091632986923858478335940288494310777071830929249405315115765238883606731718606941500157207309532360439617624401958224835459750149

y = 45725135439134113963361826641692563600290010088071995134252233042456976437706595801381701469002221387562978752398878636074662705508587478822387413044732012358847232338392037402786220397110108669942021

print p

E = EllipticCurve(GF(p),[b,c])

print E

G = E([x,y])






#! /bin/python
from sage.crypto.util import random_blum_prime


alphabet='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ,.?!:;-\'\"'
def string2number(string):
    M=0
    for i in range(len(string)):
        M = 100*M + alphabet.index(string[i])
    return M

def number2string(M):
    string=''
    while M > 0:
        i = M % 100
        M = (M-i)/100
        string = alphabet[i] + string
    return string

#sage: euler_phi(614815962170116213764777415525472854400313892374941804178773)
#614815962170116213764777415523903854187121255784956096217260

encyptedText = 15212576075036924646373802902274731927835812170710747193801815790870054287730114271005034558266025007037444773810355039380311036948792576125987215551363661664202137226481726723352058020486188680370832

PHI =  16266399742079251907018665697541081951498985778787889168105847227182078679825791543042812741927245039903691776150954421496770711299473303175497693205656556949902753171080136133120407736042736559443444

#sage: factor(614815962170116213764777415525472854400313892374941804178773)
#759511007382490001136361026431 * 809489205810146588849346935083

M = 16266399742079251907018665697541081951498985778787889168105847227182078679825791543042812741927245048237920341500777736995982922547755475119876933566136626574609857996903673341503793803735397865083321

K = 1907953013384446531257221846823523721501091213442023786389551861984644298128812085014819046798261143270450658796652830529625529759183731540200980166089673700888725886859778115524781970912593245466541

print "gcd(M,K)"

if K < M:
    print "K is less than M"
else:
    print "K is greater than M"
    
print gcd(M,K)
#print "**"
#print M   -165036643410605782622063372430353231785440139637732678059549
bezout = xgcd(K, PHI)
D2 = Integer(mod(bezout[1], PHI))
print "D2"
print D2
print "bezout"
print bezout
print "****"
#decipher = power_mod(encyptedText,D,M)

print "manual Inverse"
D = inverse_mod(K,PHI)
print D
decipher = power_mod(encyptedText,D,M)

#check = D * K
#print "check"
#print mod(check,M)
#print ""
print "decipher output"
print decipher
print number2string(decipher)

print " "
print "test congruence"
print mod(D*K,PHI)

# 166222605958625050432140712594363696018225535497859364490885
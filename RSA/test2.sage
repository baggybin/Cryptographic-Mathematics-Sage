#! /bin/python

'''

This is for PUBLIC/PRIVATE keys i have saved as Draft in Email

'''
from sage.crypto.util import random_blum_prime


alphabet='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ,.?!:;-\'\"'
def string2number(string):
    M=0
    for i in range(len(string)):
        M = 100*M + alphabet.index(string[i])
    return M

def number2string(M):
    string=''
    while M > 0:
        i = M % 100
        M = (M-i)/100
        string = alphabet[i] + string
    return string

#sage: euler_phi(614815962170116213764777415525472854400313892374941804178773)
#614815962170116213764777415523903854187121255784956096217260

encyptedText = 34350555343273895249579873245103882788551959958076578973053062279737420865892118090180992865591266235675540654094828939823882913833297149817512434919771196844845023433005474886255723903676602144721944

PHI = 40097939758984700444327879196298314437675102200424399300172644977099406765311519778855920747780687190043556502467600091398634084379985675145013593987669402761810494095000080267220980282702160605001820

#sage: factor(614815962170116213764777415525472854400313892374941804178773)
#759511007382490001136361026431 * 809489205810146588849346935083



M = 40097939758984700444327879196298314437675102200424399300172644977099406765311519778855920747780687203769720436105155266149384295638866702712530629586736421938396805546957930503126150552849442960505277

K = 29331093726614615542132036141223545882876435680459527767003067145214985011818153483869377041260069273230014716802636742116268165063323865499303224572227283020742270698932938991152422555876840893053437

print "*******************PUBLIC key*********************88888888"
print "K"
print K
print "M"
print M

print "gcd(M,K)"

if K < M:
    print "K is less than M"
else:
    print "K is greater than M"
    
print gcd(M,K)
#print "**"
#print M   -165036643410605782622063372430353231785440139637732678059549
bezout = xgcd(K, PHI)
D2 = Integer(mod(bezout[1], PHI))
print "D2"
print D2
print "bezout"
print bezout
print "****"
#decipher = power_mod(encyptedText,D,M)

print "manual Inverse"
D = inverse_mod(K,PHI)
print D
decipher = power_mod(encyptedText,D,M)

#check = D * K
#print "check"
#print mod(check,M)
print ""
print "decipher output"
print decipher
print number2string(decipher)

print " "
print "test congruence"
print mod(D*K,PHI)

# 166222605958625050432140712594363696018225535497859364490885
'''
P1 larger than 100 digits
p2 larger than 100 digits
Check
0
Check
0
Check
0
^^^^^^^^^^^^^^^^^^^^^^^^Difference Between Primes^^^^^^^^^^^^^^^^^^
-5292997005209203819205043476747233861720077019530955089890147250812064690166580829516574926656832716
*******************************************************************
101
^^^^^^^^^^^^^^^^^^^^^^^^END^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Phi True
K is less than M
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$$$$$$$$$$$$ Encyption Test $$$$$$$$$$$$$$$$$
Original Numerical Number
174047475062325053473966
Hello World!
CIPHER Output
34350555343273895249579873245103882788551959958076578973053062279737420865892118090180992865591266235675540654094828939823882913833297149817512434919771196844845023433005474886255723903676602144721944
££££££££££££££££££££££££££££££££££££££££££££££££
             Decryption Test                    
174047475062325053473966
Hello World!
$$$$$$$$$$$$$$$$$$$$END$$$$$$$$$$$$$$$$$$$$$$$$$

***********************************************************************
******************PUBLIC KEY*******************************************
***********************************************************************

 Composite Mod  M
40097939758984700444327879196298314437675102200424399300172644977099406765311519778855920747780687203769720436105155266149384295638866702712530629586736421938396805546957930503126150552849442960505277
 PUBLIC K or E
29331093726614615542132036141223545882876435680459527767003067145214985011818153483869377041260069273230014716802636742116268165063323865499303224572227283020742270698932938991152422555876840893053437

***********************************************************************
******************Private KEY*******************************************
************************************************************************

P1
4216583464214175677772853367255823582923720008034055964643219530319946580034662170376786177849335371
P2
9509580469423379496977896844003057444643797027565011054533366781132011270201242999893361104506168087
PHI
40097939758984700444327879196298314437675102200424399300172644977099406765311519778855920747780687190043556502467600091398634084379985675145013593987669402761810494095000080267220980282702160605001820
D
35978047152939590236233972666507927912214375929067579944300885498518498315645322139902225337715899110667909071736138245844622079624951303402916687931222920740378669095373206771925169524552744956162453


'''

